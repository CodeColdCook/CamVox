# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from inertial_sense/INL2States.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class INL2States(genpy.Message):
  _md5sum = "06de6b8d1957718b78007390d5c6fc67"
  _type = "inertial_sense/INL2States"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header                       # GPS time of week (since Sunday morning) in seconds
geometry_msgs/Quaternion quatEcef   # Quaternion body rotation with respect to ECEF
geometry_msgs/Vector3 velEcef       # (m/s) Velocity in ECEF frame
geometry_msgs/Vector3 posEcef       # (m) Position in ECEF frame
geometry_msgs/Vector3 gyroBias      # (rad/s) Gyro bias
geometry_msgs/Vector3 accelBias     # (m/s^2) Accelerometer bias
float32 baroBias                    # (m) Barometer bias
float32 magDec                      # (rad) Magnetic declination
float32 magInc                      # (rad) Magnetic inclination

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','quatEcef','velEcef','posEcef','gyroBias','accelBias','baroBias','magDec','magInc']
  _slot_types = ['std_msgs/Header','geometry_msgs/Quaternion','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,quatEcef,velEcef,posEcef,gyroBias,accelBias,baroBias,magDec,magInc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INL2States, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.quatEcef is None:
        self.quatEcef = geometry_msgs.msg.Quaternion()
      if self.velEcef is None:
        self.velEcef = geometry_msgs.msg.Vector3()
      if self.posEcef is None:
        self.posEcef = geometry_msgs.msg.Vector3()
      if self.gyroBias is None:
        self.gyroBias = geometry_msgs.msg.Vector3()
      if self.accelBias is None:
        self.accelBias = geometry_msgs.msg.Vector3()
      if self.baroBias is None:
        self.baroBias = 0.
      if self.magDec is None:
        self.magDec = 0.
      if self.magInc is None:
        self.magInc = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.quatEcef = geometry_msgs.msg.Quaternion()
      self.velEcef = geometry_msgs.msg.Vector3()
      self.posEcef = geometry_msgs.msg.Vector3()
      self.gyroBias = geometry_msgs.msg.Vector3()
      self.accelBias = geometry_msgs.msg.Vector3()
      self.baroBias = 0.
      self.magDec = 0.
      self.magInc = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16d3f().pack(_x.quatEcef.x, _x.quatEcef.y, _x.quatEcef.z, _x.quatEcef.w, _x.velEcef.x, _x.velEcef.y, _x.velEcef.z, _x.posEcef.x, _x.posEcef.y, _x.posEcef.z, _x.gyroBias.x, _x.gyroBias.y, _x.gyroBias.z, _x.accelBias.x, _x.accelBias.y, _x.accelBias.z, _x.baroBias, _x.magDec, _x.magInc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.quatEcef is None:
        self.quatEcef = geometry_msgs.msg.Quaternion()
      if self.velEcef is None:
        self.velEcef = geometry_msgs.msg.Vector3()
      if self.posEcef is None:
        self.posEcef = geometry_msgs.msg.Vector3()
      if self.gyroBias is None:
        self.gyroBias = geometry_msgs.msg.Vector3()
      if self.accelBias is None:
        self.accelBias = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 140
      (_x.quatEcef.x, _x.quatEcef.y, _x.quatEcef.z, _x.quatEcef.w, _x.velEcef.x, _x.velEcef.y, _x.velEcef.z, _x.posEcef.x, _x.posEcef.y, _x.posEcef.z, _x.gyroBias.x, _x.gyroBias.y, _x.gyroBias.z, _x.accelBias.x, _x.accelBias.y, _x.accelBias.z, _x.baroBias, _x.magDec, _x.magInc,) = _get_struct_16d3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16d3f().pack(_x.quatEcef.x, _x.quatEcef.y, _x.quatEcef.z, _x.quatEcef.w, _x.velEcef.x, _x.velEcef.y, _x.velEcef.z, _x.posEcef.x, _x.posEcef.y, _x.posEcef.z, _x.gyroBias.x, _x.gyroBias.y, _x.gyroBias.z, _x.accelBias.x, _x.accelBias.y, _x.accelBias.z, _x.baroBias, _x.magDec, _x.magInc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.quatEcef is None:
        self.quatEcef = geometry_msgs.msg.Quaternion()
      if self.velEcef is None:
        self.velEcef = geometry_msgs.msg.Vector3()
      if self.posEcef is None:
        self.posEcef = geometry_msgs.msg.Vector3()
      if self.gyroBias is None:
        self.gyroBias = geometry_msgs.msg.Vector3()
      if self.accelBias is None:
        self.accelBias = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 140
      (_x.quatEcef.x, _x.quatEcef.y, _x.quatEcef.z, _x.quatEcef.w, _x.velEcef.x, _x.velEcef.y, _x.velEcef.z, _x.posEcef.x, _x.posEcef.y, _x.posEcef.z, _x.gyroBias.x, _x.gyroBias.y, _x.gyroBias.z, _x.accelBias.x, _x.accelBias.y, _x.accelBias.z, _x.baroBias, _x.magDec, _x.magInc,) = _get_struct_16d3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16d3f = None
def _get_struct_16d3f():
    global _struct_16d3f
    if _struct_16d3f is None:
        _struct_16d3f = struct.Struct("<16d3f")
    return _struct_16d3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
